import unittest
from bb import BB


class BBTest(unittest.TestCase):

    def test_hasFour_not(self):
        bb = BB()
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(0)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(1)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(1)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(2)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(2)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(2)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(4)
        self.assertEqual(False, bb.hasFour())

    def test_hasFour_horizontal(self):
        bb = BB()
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(0)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(1)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(1)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(2)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(2)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(2)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(3)
        self.assertEqual(True, bb.hasFour())
        bb.addToColumn(2)
        self.assertEqual(True, bb.hasFour())

    def test_hasFour_vertical(self):
        bb = BB()
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(0)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(1)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(1)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(2)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(2)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(2)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(2)
        self.assertEqual(True, bb.hasFour())

    def test_hasFour_diag_up(self):
        bb = BB()
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(1)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(1)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(2)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(2)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(2)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(3)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(3)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(3)
        self.assertEqual(False, bb.hasFour())
        bb.addToColumn(3)
        self.assertEqual(True, bb.hasFour())

    def test_hasFour_dup2(self):
        bb1 = BB(initial=2223359239)
        self.assertTrue(bb1.hasFour())

    def test_hasFour_diag_down(self):
        bb = BB()
        self.assertEqual(False, bb.hasFour())
        bb.set(0, 5)
        self.assertEqual(False, bb.hasFour())
        bb.set(1, 4)
        self.assertEqual(False, bb.hasFour())
        bb.set(2, 3)
        self.assertEqual(False, bb.hasFour())
        bb.set(3, 2)
        self.assertEqual(True, bb.hasFour())
        bb.set(3, 1)
        self.assertEqual(True, bb.hasFour())
        bb.set(4, 0)
        self.assertEqual(True, bb.hasFour())

    def test_isFull(self):
        bb = BB()
        for row in range(BB.NB_ROWS):
            for col in range(BB.NB_COLS):
                self.assertFalse(bb.isFull())
                bb.set(row, col)
        self.assertTrue(bb.isFull())

    def test_count(self):
        bb = BB()
        self.assertEqual(0, BB.Count(bb.bb))
        bb.set(0, 5)
        self.assertEqual(1, BB.Count(bb.bb))
        bb.set(1, 4)
        self.assertEqual(2, BB.Count(bb.bb))
        bb.set(2, 3)
        self.assertEqual(3, BB.Count(bb.bb))
        bb.set(3, 2)
        self.assertEqual(4, BB.Count(bb.bb))
        bb.set(3, 1)
        self.assertEqual(5, BB.Count(bb.bb))
        bb.set(4, 0)
        self.assertEqual(6, BB.Count(bb.bb))


    def test_hash(self):
        bb1 = BB(initial=2223359239)
        self.assertEqual(bb1.bb, hash(bb1))

    def test_equal(self):
        bb1 = BB(initial=12)
        bb2 = BB(initial=12)
        bb3 = BB(initial=13)

        self.assertEqual(bb1, bb1)
        self.assertEqual(bb1, bb2)
        self.assertEqual(bb1, 12)
        self.assertEqual(12, bb2)
        self.assertNotEqual(bb1, bb3)
        self.assertNotEqual(bb1, 1)
        self.assertNotEqual(1, bb1)

    def test_getWinningFours_none(self):
        bb = BB()
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))

    def test_getWinningFours_vertical(self):
        bb02 =BB()
        bb02.set(0,2)

        bb02et12 = BB(initial=bb02.bb)
        bb02et12.set(1,2)

        bb = BB()
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(0)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(1)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(1)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(2)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(2)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(2)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(2)
        self.assertEqual((0,bb02.bb,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(3)
        h, v, u, d = BB.getWinningFours(bb.bb)
        self.assertEqual((bb02.bb,0,0), (v,u,d))
        h, v, u, d = BB.getWinningFours(bb.bb)
        bb.addToColumn(2)
        h, v, u, d = BB.getWinningFours(bb.bb)
        self.assertEqual((bb02et12.bb,0,0), (v,u,d))

    def test_getWinningFours_horizontal(self):
        bb00 =BB()
        bb00.set(0,0)

        bb00et01 = BB(initial=bb00.bb)
        bb00et01.set(0,1)

        bb = BB()
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(0)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(1)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(1)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(2)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(2)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(2)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(3)
        self.assertEqual((bb00.bb,0,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(3)
        self.assertEqual((bb00.bb,0,0,0), BB.getWinningFours(bb.bb))
        bb.addToColumn(4)
        self.assertEqual((bb00et01.bb,0,0,0), BB.getWinningFours(bb.bb))

    def test_getWinningFours_diagup(self):
        bb11 =BB()
        bb11.set(1,1)

        bb11et22 = BB(initial=bb11.bb)
        bb11et22.set(2,2)

        bb = BB()
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.set(1,1)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.set(2,2)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.set(3,1)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.set(1,2)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.set(2,1)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.set(4,4)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.set(3,3)
        self.assertEqual((0,0,bb11.bb,0), BB.getWinningFours(bb.bb))
        bb.set(0,6)
        self.assertEqual((0,0,bb11.bb,0), BB.getWinningFours(bb.bb))
        bb.set(5,5)
        self.assertEqual((0,0,bb11et22.bb,0), BB.getWinningFours(bb.bb))

    def test_getWinningFours_diagdowns(self):
        bb41 =BB()
        bb41.set(4,1)

        bb41et32 = BB(initial=bb41.bb)
        bb41et32.set(3,2)

        bb = BB()
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.set(4,1)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.set(3,2)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.set(3,1)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.set(1,2)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.set(2,1)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.set(1,4)
        self.assertEqual((0,0,0,0), BB.getWinningFours(bb.bb))
        bb.set(2,3)
        self.assertEqual((0,0,0,bb41.bb), BB.getWinningFours(bb.bb))
        bb.set(0,6)
        self.assertEqual((0,0,0,bb41.bb), BB.getWinningFours(bb.bb))
        bb.set(0,5)
        self.assertEqual((0,0,0,bb41et32.bb), BB.getWinningFours(bb.bb))


unittest.main(argv=['bidon'], exit=False)